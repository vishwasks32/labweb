<h1 id="lab-serving-static-website-using-nodejs">Lab: Serving static website using node.js</h1>
<h2 id="objectives">Objectives</h2>
<ul>
<li>Understand the concept of a static website</li>
<li>Create a simple Node.js server</li>
<li>Serve static files</li>
<li>Learn how to route requests to different static files based on the URL path</li>
</ul>
<h2 id="tasks">Tasks</h2>
<h3 id="task-1-set-up-the-nodejs-environment">Task 1: Set up the Node.js environment</h3>
<ul>
<li>Install Node.js and npm (Node Package Manager)</li>
<li>Create a new project directory and initialize a <code>package.json</code> file</li>
</ul>
<h3 id="task-2-create-a-static-website-directory">Task 2: Create a static website directory</h3>
<ul>
<li>Inside the project directory, create a new directory called <code>public</code></li>
<li>Place your static files (HTML, CSS, JavaScript, images) within this directory</li>
</ul>
<h3 id="task-3-create-a-nodejs-server">Task 3: Create a Node.js server</h3>
<ul>
<li>Write a Node.js script using the <code>http</code> module</li>
<li>Create an HTTP server instance</li>
<li>Listen on a specific port (e.g., 3000)</li>
</ul>
<div class="sourceCode" id="cb1"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">const</span> http <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;http&#39;</span>)<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">const</span> fs <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;fs&#39;</span>)<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">const</span> path <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;path&#39;</span>)<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="kw">const</span> server <span class="op">=</span> http<span class="op">.</span><span class="fu">createServer</span>((req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  <span class="co">// ...</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>})<span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>server<span class="op">.</span><span class="fu">listen</span>(<span class="dv">3000</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="st">&#39;Server listening on port 3000&#39;</span>)<span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="task-4-implement-basic-routing-and-file-serving">Task 4: Implement basic routing and file serving</h3>
<ul>
<li>Use the path module to determine the file path based on the URL</li>
<li>Use the <code>fs.readFile()</code> method to read the file contents</li>
<li>Send the file contents as the response with the appropriate content type</li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">const</span> http <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;http&#39;</span>)<span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">const</span> fs <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;fs&#39;</span>)<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">const</span> path <span class="op">=</span> <span class="pp">require</span>(<span class="st">&#39;path&#39;</span>)<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">const</span> server <span class="op">=</span> http<span class="op">.</span><span class="fu">createServer</span>((req<span class="op">,</span> res) <span class="kw">=&gt;</span> {</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  <span class="kw">const</span> filePath <span class="op">=</span> path<span class="op">.</span><span class="fu">join</span>(<span class="bu">__dirname</span><span class="op">,</span> <span class="st">&#39;public&#39;</span><span class="op">,</span> req<span class="op">.</span><span class="at">url</span>)<span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>  fs<span class="op">.</span><span class="fu">readFile</span>(filePath<span class="op">,</span> (err<span class="op">,</span> data) <span class="kw">=&gt;</span> {</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    <span class="cf">if</span> (err) {</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>      res<span class="op">.</span><span class="fu">writeHead</span>(<span class="dv">404</span>)<span class="op">;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>      res<span class="op">.</span><span class="fu">end</span>(<span class="st">&#39;File not found&#39;</span>)<span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    } <span class="cf">else</span> {</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>      res<span class="op">.</span><span class="fu">writeHead</span>(<span class="dv">200</span><span class="op">,</span> {<span class="st">&#39;Content-Type&#39;</span><span class="op">:</span> <span class="st">&#39;text/html&#39;</span>})<span class="op">;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>      res<span class="op">.</span><span class="fu">end</span>(data)<span class="op">;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>    }</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>  })<span class="op">;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true"></a>})<span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true"></a>server<span class="op">.</span><span class="fu">listen</span>(<span class="dv">3000</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true"></a>  <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="st">&#39;Server listening on port 3000&#39;</span>)<span class="op">;</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="task-5-test-the-server">Task 5: Test the server</h3>
<ul>
<li>Start the server using node <code>your_script.js</code></li>
<li>Access the static files in your web browser by visiting <a href="http://localhost:3000/index.html">http://localhost:3000/index.html</a></li>
<li>Verify that the files are served correctly and displayed in the browser</li>
</ul>
